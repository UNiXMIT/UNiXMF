# This example file contains descriptions and examples of all the CCI.INI
# options that are available in the commonly used CCI modules.
#
# Options documented here are:
#    Generic (all cci modules, including trace options)
#    CCITCP
#    CCISMEM
#
# Additional options that govern cross protocol behaviour
#    CCITRACE


# Generic CCI settings that affect all CCI modules. 
#
# Generic settings are located in the [cci] section and may be overriden by
# similar entries in [<protocol>-base] section and sometimes by environment
# variables.
#
# CCI Parameter Checking
#
# "cci_param_check" is an on/off toggle that can tell CCI to trust incoming 
# parameters, and so avoid checking them for validity prior to use.  The  
# effect is slightly increased speed at the expense of potential for memory 
# access errors from improperly formed parameters being passed to CCI. 
#
# If there is an application that has been tested and running for a while
# this parameter should be switched to "off".
#
# The status of cci_param_check may be changed in the priority order as follows:-
#
#  1) By using an errlog_path in a protocol specific section of cci.ini
#  2) By using an errlog_path in the [cci] section of cci.ini
#  3) By using the CCI-Option function for a given protocol in an application
#
#  "yes" and "on" have the same effect. "on" is the default setting.
#  "no" and "off" have the same efect.
#  No other values are supported.
#
#  cci_parm_check=yes
#
#
# CCI First Failure messages
#
# CCI First Failure messages indicate error conditions at the point 
# of failure, and are placed into a "ccierr.log" file in the curent
# working directory of the application calling CCI.
#
# The location of ccierr.log, and the file name itself may be changed
# in the priority order as follows:-
#
# 1) By using CCIERRLOG environment variable.
# 2) By using an errlog_path in a protocol specific section of cci.ini
# 3) By using an errlog_path in the [cci] section of cci.ini
# 4) By using the CCI-Option function for a given protocol in an application
#
# So, if (1) is satisfied, 2,3,4 don't have any effect.
#
# The format of the entry content is as follows:-
#
# "<filestring>"      Note: no switching options, just set a log file 
#                           location and/or name.
# "on" or "yes"       Note: force on STD status and use current, or 
#                           default output file location and name.
# "on,<filestring>"   Note: force on STD status and use specified file
#                           setting
# "INIT"              Note: force on STD status plus some connection 
#                           creation tracing elements (INIT status), 
#                           and use current, or default file setting.
#                           If implemented this will provide information
#                           about connection attempts that is similar to a 
#                           restricted trace sequence rather than normal 
#                           failure logging.
# "INIT,<filestring>" Note: force on STD status plus some connection 
#                           creation tracing elements (INIT status), 
#                           and use newly specified file setting
# "FULL"              Note: force on STD status plus some tracing 
#                           elements (FULL status), and use current, 
#                           or default file setting
# "FULL,<filestring>" Note: force on STD status plus some tracing 
#                           elements (FULL status), and use newly 
#                           specified file setting
# "off" or "no"       Note: force off with no effect on location
# "off,<filestring>"  Note: force off status and update location to 
#                           specified file setting
#
# Note: Other levels of output may be added in the future.
#
#
# Error logging Content Filtering options:
#
# "FULL": all options below here...
# "BASEIO": all options below here...
# "INIT": trace only session establishment details.
# "TERM": trace only session termination details.
# "INIT_TERM": trace session creation and termination details.
# "ALL_DATA": trace all session data transmissions.
# "SENT_DATA": trace session transmission of data.
# "RECEIVED_DATA": trace session receipt of data.
#
#
# "<filestring>" definitions:
#
# "<filestring>" contains either a directory which will hold a file 
# named "ccierr.log", or a full path and file name to be used to hold
# the log contents.
#
# If "<filestring>" is naming a directory, the final character must
# be "\" on Windows systems, or "/" on Unix/Linux systems.
# 
# Note: CCI will not create a directory to hold ccierr.log.
#
# If the final "\" is missed and the directory exists no output will take place.
# If the final "\" is missed and no directory exists output will be placed in
# a file of the same name as the directory.
#
# Note: Other levels of output may be added in the future. Some options are not
# implemented with this release on all protocols.
#
# examples:
#
# errlog_path=yes,ccierr.log
#   all failure messages logged into ccierr.log in the current working 
#   directory: this is the default behaviour
#
# errlog_path=yes,c:\ccilogs\
#   all failure messages logged into c:\ccilogs\ccierr.log: default content, 
#   with a fixed location.
#
# errlog_path=INIT
#   Trace all listening and client endpoint startup details, plus any failure
#   messages to the default current working directory location and "ccierr.log" file name.
# 
# errlog_path=INIT,c:\ccilogs\
#   Trace all listening and client endpoint startup details, plus any failure
#   messages to the "c:\ccilogs\ccierr.log" file.
# 
# errlog_path=INIT,c:\ccilogs\testoutput.log
#   Trace all listening and client endpoint startup details, plus any failure
#   messages to the "c:\ccilogs\testoutput.log" file.
# 

[cci]
#  "errlog_path" is the location for all ccierr.log failure log messages to 
#  be placed. The file name "ccierr.log" remains the same but all messages from
#  all CCI modules that use this INI file setting will be placed in one message
#  file.  See comments above.
#  Note: This setting can be overridden using "CCIERRLOG" environment variable
#  or by using the same setting in a protocol-base section of this file. 
#  If a filename is used in the [cci] section and a directory in the protocol
#  specific sections, the combination of both will be used to to hold the logs.
#
#  Examples:
#
#  errlog_path=c:\ccilogdir\  
#
#    set the file location, keep default file name which can be overriden in 
#    the protocol specific cci.ini sections.
#
#  errlog_path=c:\ccilogdir\filename
#
#    set the file location and default file name, either of which can be  
#    overriden in the protocol specific cci.ini sections.
#
#  errlog_path=filename
#
#    set a new default file name, but do not set a directory.  Either can be
#    overriden in the protocol specific cci.ini sections.
#
#
#  "cci_param_check" is an on/off toggle that can tell CCI to trust incoming 
#  parameters, and so avoid checking them for validity prior to use.  The  
#  effect is slightly increased speed at the expense of potential for memory 
#  access errors from improperly formed parameters being passed to CCI. 
#
#  cci_param_check=yes
#
#  CCI generic all protocol override of default timeout period for
#  each CCI function call. 
#  Set using a period in milliseconds. The default is 120 seconds.
#
ccitimeout=12000

[ccitrace-base]
        force_trace_on=yes
        data_trace=yes
        protocol_trace=yes
        internal_net_api=yes
        trace_file_name=ccitrc

# Options specific to individual protocol modules

# CCITCP options start here

[ccitcp-base]
# 
# SSL connection failure can be difficult to diagnose without
# a GUI to present information to users. A minimal trace facility
# has been added to provide details of the reason for connection
# failures that occur during SSL session negotiation sequences.
#
# Display the negotiated cipher
#
ssl_display_cipher=yes
#
# Display details of the peer certificate (if any)
#
ssl_display_cert=yes
#
# Display why the certificate content failed its trust test.
#
ssl_display_cert_fail_report=yes
#
# Display all details available about the offered certificate.
#
ssl_display_cert_connection_details=yes
#
# Switch on or off the SSL options above
#
ssl_display_options_on=yes
#
# Where to save the certificate information
#
ssl_display_destination=c:\tmp\TLS\tls.txt
#
#
# TCP/IP related options follow:-
#
#  close_negotiate clears incoming data streams
#  prior to closing connections
#  "yes" 15 wait up to 15 seconds to clear incoming data
#  "no" normal shutdown, no waiting
#  "disabled"
#  "<wait time in 10ths second>"
#
#    close_negotiate=0
#
#  close_wait waits for remote ends to close before 
#  calling "close" after doing a socket "shutdown".
#  "on" or "yes" enables use of close_wait_time
#
#    close_wait=no
#
#  close_wait_time sets the time to wait
#  but only if close_wait is also switched on
#  "-1" switch off wait
#  "<length of time to wait>"
#
#   close_wait_time=0
#
# close_wait_loc
#
# linger_period sets the default time to linger on socket closure in 
# seconds, default is 15 seconds.
#
#  linger_period=15
#
# max_send limits the amount of data that may will be sent in any single 
# call to the TCP streams provider.  According to the API specification 
# the maximum size is INT_MAX. When the buffers fill the ENOBUFS error should 
# be returned, and the application should call again after a period of times
# has been left to allow the buffers to empty.  CCI is coded to handle the 
# re-calling for its users silently.  
#
# Some operating systems and TCP/IP stack combinations report errors that cannot 
# be rectified if their outbound send buffers become flooded with data.  The 
# actual amount varies with versions of operating system, TCP/IP stack and the 
# operation load on the system. The actual error that is reported is usually not
# entirely sensible and may manifest itself as a range of errors at the CCI API.
#
# To overcome this issue CCITCP can limit the amount of data that it will attempt
# to send.  It is up to the user to specify a sensible amount for their 
# environment.  It is worth noting that Microsoft, in a KB entry relating to 
# a 32-bit Vista incident recommended 65535bytes as a sensible limit.
#
#  max_send=INT_MAX
#
# "errlog_path" is the location for all ccierr.log failure log messages to 
# be placed. The file name "ccierr.log" remains the same but all messages from
# all CCI modules that use this INI file setting will be placed in one message
# file.  See comments above.
# Note: The setting in [cci] can be overridden using "CCIERRLOG" environment variable
# or by using the same setting in a protocol-base section of this file. 
#
#   errlog_path=c:\temp
#
# "cci_parm_check" is an on/off toggle that can tell CCI to trust incoming 
# parameters, and so avoid checking them for validity prior to use.  The  
# effect is slightly increased speed at the expense of potential for memory 
# access errors from improperly formed parameters being passed to CCI. 
#
#  cci_param_check=yes
#


# CCITCP has the ability to override simple server names that are coded 
# into applications and add more parameter options or use a new server name.
# Sections [ccitcp_servers] and [ccitcp_targets] contain configuration 
# override strings.  Environment variables with the same names can be used 
# instead of using a CCI.INI file.
#
# These options can be thought of as a service name and location macro for use 
# by all CCITCP Servers and clients to re-define their startup location, or to
# enable a secure connection where one wasn't originally supported in the CCI 
# application.
#
# This is an override for a CCI Server name <pubname> and/or the CCI Clients
# machinename which allows extended syntax to be used to replace a simplistic 
# <pubname>.
#
# For example if an application starts a server called "FILESHRTEST" then the
# following entry would alter the name that the system used to 
# "NEW_CCI_SERVER_NAME".
#
# The full CCITCP range of endpoint identification syntax can be used in this 
# configuration re-direction string.
#
# Example - replacing a simple server name
# CCITCPS_FILESHRTEST=NEW_CCI_SERVER_NAME
#
# Example - naming a network node (card) to listen on.
# CCITCPS_FILESHRTEST=NEW_CCI_SERVER_NAME,MFNODE:172.16.23.1
#
# Example - naming a network port to listen on.
# CCITCPS_FILESHRTEST=NEW_CCI_SERVER_NAME,MFPORT:4553
#
# Example - naming a network node (card) and a fixed port to listen on.
# CCITCPS_FILESHRTEST=NEW_CCI_SERVER_NAME,MFNODE:172.16.23.1,MFPORT:4553
#
# Example - securely naming a network node (card) to listen on.
# CCITCPS_FILESHRTEST=NEW_CCI_SERVER_NAME,MFCONN:<PasswrdKeyFile,CACertFile,>,MFNODE:172.16.23.1,MFPORT:4553
#
# The full range of classic CCI mode CCITCP adressing options are as follows:- 
#
#    "NEW_SRVR_NAME,MFCONN<data>,MFNODE:<node_data>,MFPORT:<port_data>"
#    "NEW_SRVR_NAME,MFCONN<data>,MFNODE:<node_data>" (default server CCI port is system assigned)
#    "NEW_SRVR_NAME,MFCONN<data>,MFPORT:<port_data>" (default server node == 0 (any))
#
# The full range of raw TCP ",MFDIRECT" CCI mode CCITCP adressing options are as follows:- 
#
#    ",MFDIRECT,MFCONN<data>,MFNODE:<node_data>,MFPORT:<port_data>"
#    ",MFDIRECT,MFCONN<data>,MFNODE:<node_data>" (default port == 23)
#    ",MFDIRECT,MFCONN<data>,MFPORT:<port_data>" (default server node == 0 (any), default client node = FAILURE)
#
# The ,MFCONN section above can add CCI SSL configuration to secure any CCITCP connection.
# the required and optional syntax is different for servers and clients.
#
# If we are a SERVER, we're looking for the following section: 
#
#    "MFCONN:SSL:<CACert_file>:MyCert_file:<MyCertPass>:MyKey_file:MyKeyPass<,>"
#
# where  <CACert_file>, <MyCertPass> and the trailing <,> are optional.
#
# If cert_file is not found CCI will use "ccicerts.pem"
# If key_file is not found CCI will use "ccicerts.pem"
# Both files will be searched for in the current directory on in the directory 
# pointed to by the CCISSL environment variable.
#
# If we are a CLIENT, we're looking for the following section:
#
#         "MFCONN:SSL:CACertfile:<MyCert_file>:<MyCert_pass>:<MyKey_file>:<MyKey_pass><,>"
#
# where 
#       <MyCert_file>:<MyCert_pass>
# and
#       <MyKey_file>:<MyKey_pass>
# and 
#       <,> 
# are optional. 
#
# The CACertfile is a required entry.
#
# Note: The missing optional elements define how the SSL connection is 
# established.  For instance if the server has a CACertfile defined it will 
# expect a client to have a <MyCert_file>:<MyCert_pass> file pair.
#
# If <,> is found direct address information (MFNODE and/or MFPORT) must follow.


[ccitcp-servers]
# This options replaces the configuration for the name following "CCITCPS_"
#
# CCITCPS_OLDSERVNAME1=a_new_server_name,MFNODE:127.0.0.1,MFPORT:4553
# CCITCPS_OLDSERVNAME2=a_new_server_name2,MFNODE:127.0.0.1,MFPORT:4553

[ccitcp-targets]
# This option can be thought of as a target endpoint macro for use by all 
# CCITCP Clients.
#
# This is an override for CCI Clients that are attempting to create a connection
# to a simple Server Name <OLDSERVNAME>
#
# CCITCPT_  allows extended syntax to be used to enhance a simplistic
# <pubname> to include complex details such as SSL security options or 
# specific target locations.  These options are different for each underlying 
# protocol (CCI, RAW TCP/IP (,MFDIRECT syntax)) and different again when adding
# SSL to either connection type) and are documented in the machinename parameters 
# for each protocol.
# If the content starts with any ",MF" option except ",MFDIRECT" the entire 
# line is treated as a replacement for the  CCI Machinename parameter and the 
# "OLDSERVNAME" pubname parameter is not overwritten.
#
# CCITCPT_OLDSERVNAME1=a_new_server_name



# CCISMEM options start here
[ccismem-base]
# Maximum size if paging files not specified in ServerName 
# during an INITSERVER call
#    mem_file_size=8192  
#
# Maximum of concurrent clients per service if not specified 
# in ServerName during INITSERVER call
#    max_clients=2048  
#  
# Base location for services, all named resources and paging files.
# This value may be overruled by ServerName in INITSERVER or
# INITCLIENT by starting the service name with a fully qualified
# path. If not specified the system swapper file is used.
#
#    mem_files_location=c:\ccismem
#
# Performance diagnostic option only!  Log the largest 
# transmission that has been sent in each connection 
# when they are being closed. This setting is provided 
# to help determine the value that mem_file_size 
# should be set to in order to save space, and to
# avoid slowing the system by forcing buffer splitting 
# and re-construction when using miss-configured
# small transit buffers. The value will appear as a 
# ccierr.log entry at the termination of each connection.
# To avoid growing ccierr.log to huge sizes this should only
# be used in performance tuning.
#
#    log_max_sent_trans=yes
#
# Allow interaction between users on a single system.
# Using this option reduces security as all users will
# have access to the same name space.
#
#    use_global_namespace=yes
#
# Smemnet.c Version 1.19 onwards below...
#
# Each server has a thread which monitors the status of
# connections with its clients. Clients have a similar thread which
# monitors the status of connections with servers.
# Set the period between each scan to vary the pause between 
# disconnect detection cycles. Too small a pause will increase 
# CPU load on the system. Too large will impact time to detect 
# terminations and failures.
# The time is set in milliseconds. It defaults to 300.
#
#   peer_poll_sleep=300
#
# CCI Module specific override of default timeout period for
# each CCI function call. 
# Set using a period in milliseconds. The default is 120 seconds.
#
#   ccitimeout=120000
#
#
# "errlog_path" is the location for all ccierr.log failure log messages to 
# be placed. The file name "ccierr.log" remains the same but all messages from
# all CCI modules that use this INI file setting will be placed in one message
# file.  See comments above.
# Note: The setting in [cci] can be overridden using "CCIERRLOG" environment variable
# or by using the same setting in a protocol-base section of this file. 
#
#   errlog_path=c:\temp
#
# "cci_parm_check" is an on/off toggle that can tell CCI to trust incoming 
# parameters, and so avoid checking them for validity prior to use.  The  
# effect is slightly increased speed at the expense of potential for memory 
# access errors from improperly formed parameters being passed to CCI. 
#
#  cci_param_check=yes
#

